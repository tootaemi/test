package test;
//public class Selfstudy {
	//public static void main(String[] args) {
//		String str = "Hello!";
//		System.out.println(str);
		//int num =10;
		//System.out.println(num);   //10が表示される
////		if (args.length != 0) {
		//System.out.println("emi");
//		//System.out.println("Hello");     //「Hello」という名前のクラス
		//}
	//}


//1、javaの概要
//プログラミング言語「Java」の特徴や歴史、エディションについて学ぶ。
//
//2、変数、データ型、演算子
//変数とは何か、変数の使い方など学び、簡単な演算プログラムを作る。
//
//1-1 Javaの歴史と特徴
//・一度書いたら、どこでも動く
//・オブジェクト指向プログラミングの方法論を採用している。
//・ネットワークを扱う機能を標準で備えている。
//・分散システムを扱う機能を標準で備えている。
//
//1-2
//Javaの種類と開発環境
//・Javaでソフトウェアを開発するにはJDKが必要。
//・JavaにはSE/EE/MEという3つのエディションが必要であるが
//JavaEE/MEを使うためには最も基本となるJava/SEが必要である。
//
//Java EE　（エンタープライズ・アプリケーション用）
//Java　ME　（組み込みや携帯電話用）
//Java SE　（基本的な機能を提供）

//1-3 Javaの開発環境を準備する
//（感想のみ）
//JDKインストールと環境変数の設定⇨この作業に役2.5時間
//かかってしまった。。
//ダウンロードより環境変数の設定に苦戦した。
//まだ理解が遅かったが徐々に自分で気づけて良かった。（ChatGPTありがとう）
//
////1-4　プログラミングを始める
//・プログラムの内容であるソースコードを作成し『java.』ファイルとして保存する。
//・コマンドプロンプトでjavacコマンドを使ってコンパイルする。
////・コンパイルされた『.class』ファイルをjavaコマンドで実行する。
//
//字下げはTABキを押して入力する。
//スペースを使って字下げしない。
//Javaは大文字と小文字を厳密に区別するのでスペルミスには注意する。

////※ソースコードを保存するファイルの拡張子は必ず「.java」にする。
//
//1-5　Javaのプログラムが動く仕組み
//・コンパイルとはコンピュータがソースコードを理解できるように翻訳することである。
//・コンパイルするための翻訳プログラムのことを「コンパイラ」という。
//・Javaではコンパイルを2回行い、2回目のコンパイルはプログラムの実行にJVMを使って翻訳している。
//
//コンピュータが理解できるように翻訳してあげる必要がある。
//この翻訳作業のことを『コンパイル』
//翻訳前のコードを「ソースコード」
//ソースコードをコンパイルするための翻訳プログラムのことを「コンパイラ」と呼ぶ。
//
//1-6　プログラムを構成するもの
//・1つのプログラム部品のことを「クラス」という。
//・ブロックとは、コードのかたまりを表す集合体のことで、
//『{」から「}』で表す。
//・コード中の命令のことを「ステートメント」、
//プログラムの実行中に扱うデータのことを「リテラル」という。

//System.out.println("emi");
//「"」ダブルクォーテーションで括られたデータが画面に表示される。
//表示したいデータが数値の場合には、「"」なしで記述できる。
//System.out.println(100);
//数値は”なし
//文字列は"あり　で記述する。


//コメント
/*       ここから
 * 　　　　コメント
 *        コメント
 */       //ここまでコメント


//インデント
//ブロックの開始を表す中カッコ『{』が始まったら次の行からタブを1つ入れる。
//閉じるカッコ『}』が出てきたら次の行では字下げを1つ戻す。
//


//2、変数、データ型、演算子
//2-1 変数と宣言方法
//
//public class Selfstudy {
//	public static void main(String[] args) {
		//int num;     //変数の宣言
		//num =10;     //変数の初期化
//	}
//}

//	public static void main(String[] args) {
//		int num =10;
//		System.out.println(num);   //10が表示される

//※変数は使う前に必ず初期化しておく必要がある。
//初期化していない変数を使おうとするとコンパイルエラーになる。

//文字列を扱うString型
//String型はメモリーが許す限り文字数を扱える。
//char型は1文字しか扱えない。
//
//構文　String型の変数の宣言
//String 変数名 = "文字列";
//文字列は必ず「”」で囲む。

//String str = "Hello!";    //String型の変数strを宣言し「Hello」で初期化
//System.out.println(str);  //strに代入されている「Hello!」を表示
//
//※　文字、、、1文字しか扱えない。データ型はchar
//　文字列、、、何文字でも扱える。データ型はString
// 
// 定数の宣言
// 定数とは値を変更できない変数のこと。
// 
// 2-2　算術演算子
// 演算子　　使用例　　　意味
// +        a + b　　足し算
// -        a - b    引き算
// *        a * b    掛け算
// /        a / b    割り算
// %        a % b    aをbで割った余り

		//int a = 10;  //aを10で初期化
		//int b = 20;  //bを20で初期化
		//int c = a + b;  //aとbの値を足した結果をcに代入
		//System.out.println(c);  //cの値を表示→30が表示
		//}
	//}
		
		//int a = 10;
		//System.out.println(a % 3);  //aの値を3で割った余りを表示→1
		//}
	//}	
		
	//文字列演算子
	//⇨2つ以上の文字列があった時にそれらを＋演算子で足して文字列を1つに繋げること。
		
	//String a = "Hello, ";  //カンマに後ろはスペースを1つ入れる
	//String b = "Java";
	//String result = a + b + "!";  //文字列を連結しresultに代入
	//System.out.println(result);   //連結された1つの文字列を表示
//	}                             //Hello, Java!を表示
//}

//インクリメント、デクリメント
//int a = 10;
//int b = 10;
//a = a + 1;    a++;  //変数aの値は11になる
//b = b - 1;    b--;  //変数bのあたいは9になる

//インクリメント演算子「++」
//デクリメント演算子「--」	
		
		//前置、後置では動作が異なる。

//			int a = 10;
//			int b = a++;
//			int c = ++a;
//			System.out.println(b);   //10　後置のインクリメント
//			System.out.println(c);   //12　前置のインクリメント
			
//			int a = 10;
//			int b = ++a;
//			System.out.println(b);      //11が表示される。
		
		//175行目、インクリメント演算子を前置している。
		//変数aの値に1を加えた後その値が変数bに代入される。
		//そのため176行目では11が表示される。
		
		//一方、次のコードのように後置した場合、
		//変数aの値に1を加えた後,変更前の値が変数bに代入される。
		
			//int a = 10;
			//int b = a++;
			//System.out.println(b);      //10
			//System.out.println(a);      //11
		
	//このような結果になるのはインクリメント演算子やデクリメント演算子を後置した場合
	//次のような順で動作するから。（説明はインクリメントの場合）
	
	//①変数の値をコピー
	//②変数の値を増やす
	//③①でコピーしておいた値を戻す
	
//	後置した場合、変更する前にとっておいたコピーが戻される。
//	そのため、インクリメントやデクリメントの結果を代入している式の場合は、
//	変更前の値が代入される。
//	186行目では変更前の変数aの値である10をコピーしておいて
//	変数aの値を11に増やし、その後コピーしておいた10を戻す。
//	このため変数bには10が代入されることになる。
//	前置しても後置しても、変数aの値が1つ増えることには変わりない。
//	しかし、変数bに代入されるのが変更後の値（前置）なのか
//	変更前の値（後置）なのかという点が異なる。
//	
//	
//		①おさらい
//		Q1.Javaのエディションではないもの
//		Java DB
//      JavaエディションはJava SE,Java EE, Java MEである。
//		
//		Q2.実行結果として正しいもの
		
//		public class Selfstudy {
//			public static void main(String[] args) {
//				int num = 10;
//				int result = num++ % 4;
//				System.out.println("result");
//				
//				インクリメント演算子は前置と後置で動作が異なる。
//				後置した場合、変数の値をコピーした後に1増やし、
//				コピーしておいた元の値を戻す。
//			　　　⇨10を4で割った時の余りを求めるという式になる。
//				
//				
//	}
//}

		
		
		
		
		
		
		