package test;

public class Selfstudy3 {
	public static void main(String[] args) {
//		System.out.println("Selfstudy3");

	}

}

//
//オブジェクト指向
//・いくらクラスやメソッドに分けたとしても、
//ソースコードが複雑になれば
//開発者自身が把握しきれなくなる。⇨オブジェクト指向プログラミング
//
//・オブジェクト指向とは、、、ソフトウェア開発をする時に部品化をする考え方
//
//どのような基準で部品化をすればいいのかの考え方を学ぶ
//⇨
//・プログラムの把握しやすさの向上
//・プログラムの保守性の向上
//・プログラムの再利用性の向上
//この3つを達成するために部品化する。
//
//この3つを達成するために部品化をするためにどうすればいいのか
//出る１つの答えが
//⇨役割ごとに部品化する
//
//役割ごと⇨計算する人、数字を入力する人、出力する人
//役割ごとに部品化するというのがオブジェクト指向で大切な考え方。
//
//上記がオブジェクト指向の全体像。
//
//オブジェクト指向の3大機能
//・カプセル化・・・属性や操作を一部の相手から利用禁止にする
//
//・継承・・・過去に作った部品を流用し、新しい部品を簡単に作る
//
//・多様性・・・似ているものを同じようなものとみなし、再利用する
//
//
//（オブジェクト指向のさわり）



