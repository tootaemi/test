package test;

public class Bronze1 {
	public static void main(String[] args) {
//		  System.out.println("終");
		  
		  
	//9日目
	//クラスの継承
//	
//		public class A {
//			private int num;
//			public void setNum(int num) {
//				this.num = num;
//			}
//		}
//		
//		public class B extends A {
//			private int num;
//			public int getNum() {
//				return num;
//			}
//		}
//		
//		public class InheritanceTest {
//			public static void main(String[] args) {
//				B b = new B();
//				b.setNum(10);
//				System.out.println(b.getNum());
//			}
//		}
//		  
//		  
//		このJavaのコードサンプルは、継承とカプセル化の概念を使用しています。
//		クラスAは、`num`という名前のprivate変数を持ち、
//		この変数の値を設定するpublicメソッド`setNum`を提供します。
//		クラスBは、クラスAを拡張し、同じ名前の`num`という新しいprivate変数を持っています。
//		クラスBは、この新しい`num`変数の値を返すpublicメソッド`getNum`を提供します。
//
//		`InheritanceTest`クラスの`main`メソッドでは、クラスBの
//		インスタンスが作成され、`setNum`メソッドを通じて`num`に`10`が設定されます。
//		しかし、`setNum`メソッドはスーパークラスAの`num`変数に値を設定しますが、
//		`getNum`メソッドはサブクラスBの`num`変数の値を返します。
//		サブクラスBの`num`変数は、別に初期化されていないので、
//		`getNum`メソッドはデフォルト値`0`を出力します。
//
//
//		このコードは、継承とカプセル化を示しています。
//		`A`クラスは`num`というprivate変数を持ち、この変数の値を設定するための
//		`setNum`というpublicメソッドがあります。
//		`B`クラスは`A`クラスを継承し、新たに`num`というprivate変数を持っています。
//		また、`B`クラスはこの`num`変数の値を取得するための
//		`getNum`というpublicメソッドを持っています。
//
//		`InheritanceTest`クラスの`main`メソッドでは、
//		`B`クラスのインスタンスが生成され、`setNum`メソッドを使って
//		`num`に`10`を設定します。しかし、`setNum`は
//		スーパークラス`A`の`num`に値を設定し、
//		`getNum`メソッドはサブクラス`B`の`num`の値を返します。
//		`B`の`num`は別途初期化されていないため、
//		`getNum`メソッドはデフォルト値の`0`を出力します。
//		  
		  
		 // 10日目
		  //例外処理
		
		//11日目
		//ポリモーフィズム
		
//		型の相換性を調べるinstanceof演算子
//		「型」について。
//		
//		
//		構文　instanceof演算子
//		調査対象　instanceof 型
		
//		
//		同一性を確認する＝＝演算子
//		２つ目の「同じ」は、参照について。
//		2つの参照型変数があった時、同じインスタンスへの参照を
//		それぞれが同時に保持することができる。
//		この時の2つは「同一である」といい、
//		このような性質を「同一性」と呼ぶ。
//		同一であるかどうかは、＝＝演算子で確認できる。
		
////
////public class Bronze1 {
////	public static void main(String[] args) {
//		A a = new A();
//		A b = a;
////		System.out.println(a == b); //変数aとBの参照が同一かどうか調べる
////	}
////}
//→　「A b = a;」で変数aとbは同じ参照を持っていることになり
//「System.out.println(a == b);」ここのコードはtrueをコンソールに表示する。
//
//オブジェクトの参照比較に関する基本的な概念を示しています。
//`Bronze1`クラスの`main`メソッドでは、`A`クラスの
//新しいインスタンスが変数`a`に代入され、その後、`a`の参照が
//変数`b`にコピーされます。この時点で、`a`と`b`は
//同じ`A`クラスのインスタンスを指しています。
//
//プログラムが`System.out.println(a == b);`を実行すると、
//この式は`a`と`b`が同じオブジェクトを参照しているかどうかをチェックします。
//この場合、`a`と`b`は同じインスタンスを指しているので、結果は`true`になります。
//
//つまり、このプログラムは`true`を出力します。
//これは、Javaにおいて`==`演算子が
//参照の等価性（つまり、二つの変数が同じオブジェクトを指しているかどうか）を
//チェックするために使用されることを示しています。
//オブジェクトの内容の等価性をテストするには、`equals`メソッドを使用する
//必要があります（ただし、このプログラムでは
//オブジェクト内容の等価性のテストは行われていません）。


		//同値性を確認するequalsメソッド
		//３つ目の「同じ」は値について。
//		2つの顧客インスタンスがあったとする。
//		基になった顧客クラスは、顧客番号、名前、住所など
//		顧客に関するデータを扱っているクラス。
//		２つのインスタンスは異なるインスタンスだが
//		同じ顧客番号、同じ指名、同じ住所など、全く同じデータを保持していたとする。
//		このようにインスタンスが異なっていても
//		同じ値を持っている場合、これも「同じ」であると表現できる。
//		これを「同値」といい、このような性質を「同値性」と呼ぶ。
//		
		
		  
		  
		  
		  
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		  
	}
}